<?php

namespace app\merchant\controller;

use app\agent\model\MerchantIncom;
use app\merchant\model\MerchantShop;

use app\merchant\model\SubBranch;
use think\Controller;
use think\Db;
use think\Exception;
use think\exception\DbException;
use think\Request;
use think\Session;
use app\admin\controller\Incom;
use app\admin\model\IncomImg;


class Shop extends Commonality
{

    public $url = 'http://sandbox.starpos.com.cn/emercapp';//测试环境

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

    }
    public function index()
    {
        $merchant_id=$this->id;
        $merchant_id=87;
        //bnk_acnm 户名  wc_lbnk_no 开户行  stl_sign 结算标志  stl_oac结算账户 icrp_id_no 结算人身份证号    crp_exp_dt_tmp结算人身份证有限期
        $data=MerchantIncom::where('merchant_id',$merchant_id)->field('icrp_id_no,crp_exp_dt_tmp,stl_oac,bnk_acnm,wc_lbnk_no,stl_sign')->find();
       if(!$data->stl_sign){
           $name=SubBranch::where('lbnk_no',$data['wc_lbnk_no'])->field('lbnk_nm')->find();
           $data['lbnk_nm']=$name['lbnk_nm'];
       }

        return_msg(200,'success',$data);
    }

    /**
     * 查询支行名称   联号
     * @param Request $request
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function index_query(Request $request)
    {
        //lbnk_nm 支行名称
        $name=$request->param('lbnk_nm');
        if($name){
            $data=SubBranch::where('lbnk_nm','like',"$name%")->field('lbnk_nm,lbnk_no')->select();
            if($data){
                return_msg(200,'success',$data);
            }else{
                return_msg(400,'error','支行名称填写错误,请重新填写');
            }
        }else{
            return_msg(500,'error','请输入支行名称');
        }

    }

    /**
     * 门店进件
     * @param Request
     * @throws DbException
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\PDOException
     */
    public function shop_incom(Request $request)
    {
        //stl_typ 结算类型
        //tranTyps 交易类型 suptDbfreeFlg免密免签 cardTyp卡种（银行
        //卡必选） stl_sign结算标志 orgNo机构号 stl_oac结算账户 bnk_acnm户名 icrp_id_no结算人身份
        //证号 crp_exp_dt_tmp结算人身份证有限期  wc_lbnk_no开户行  mailbox联系人邮箱 alipay_flg扫码产品
        //  yhkpay_flg银行卡产品 fee_rat_scan扫码费率(%) fee_rat1_scan银联二维码费率 fee_rat2 _scan银联标准费率
        //fee_rat借记卡费率(%)  max_fee_amt借记卡封顶(元） fee_rat1贷记卡费率（%）
        $datatel = $request->post();
        $data = $datatel;
        $datatel['merchant_id']=88;


        //查询商户的log_no流水号、mercId识别号    stl_sign结算标志 1对私 2对公
        $log_no = Db::name('merchant_incom')->where('merchant_id', $datatel['merchant_id'])
            ->field('fee_rat2_scan,ysfdebitfee,ysfcreditfee,fee_rat1,max_fee_amt,
            fee_rat,fee_rat2_scan,fee_rat1_scan,fee_rat3_scan,fee_rat_scan,yhkpay_flg
            ,alipay_flg,tranTyps,log_no,mercId,suptDbfreeFlg,cardTyp,stl_typ,
            orgNo,mcc_cd,log_no')
            ->find();

//        return json_encode($log_no);die;
        //status判断商户状态是否是注册未完成、修改未完成
//        if(in_array($log_no[ 0 ][ 'status' ], [1, 2])) {


        //存入门店数据
        $result = $log_no;
        $result = array_merge($result, $datatel);
        $result = array_diff_key($result, ['mercId' => 1, 'log_no' => 2, 'status' => 3]);

        $create_id = Db::name('merchant_shop')->insertGetId($result);
        if (!$create_id) {
            return_msg(400,'success', '数据不正确');
        }else{
            return_msg(200,'success',['shop_id'=>$create_id]);
        }

//        $adress=$this->address($datatel['stoe_adds']);
//        if(!$adress){
//            return_msg(400,'error','地址格式错误');
//        }
        $data['stoe_area_cod']="310112";
        $data['serviceId'] = "6060602";//交易码
        $data['version'] = 'V1.0.4';//版本号
//        $data['log_no'] = "201810110001103896";
        $data['stoe_nm']=$data['shop_name'];
        $data = array_merge($data, $log_no);
//        unset($data['']);
//        unset($data['merchant_id']);
        unset($data['status']);
        unset($data['shop_name']);
//        return json_encode($data);
        //签名域
//        return_msg(200,'e',$data);
        $sign_value = sign_ature(0000, $data);
//            dump($sign_value);die;
        $data['signValue'] = $sign_value;
//        return json_encode($data);

        //向新大陆接口发送请求信息
//        var_dump($data);die;

        $shop_api = curl_request($this->url, true, $data, true);
            return $shop_api;
        $shop_api = json_decode($shop_api, true);
        //获取签名域
//        var_dump($shop_api);die;
        $return_sign = sign_ature(1111, $shop_api);
        if ($shop_api['msg_cd'] === '000000') {
            if ($shop_api['signValue'] == $return_sign) {
                $datle = ['id' => $create_id, 'stoe_id' => $shop_api['stoe_id'], 'log_no' => $shop_api['log_no']];
                Db::name('merchant_incom')->where('merchant_id', $data['merchant_id'])->update(['status' => 0]);
                //返回成功
                Db::name('merchant_shop')->update($datle);
                return_msg(200, 'success', $shop_api['msg_dat']);

            } else {
                return_msg(400, 'error', $shop_api['msg_dat']);
            }
        } else {
            return_msg(500, 'error', $shop_api['msg_dat']);
        }
//        }else{
//            return_msg(100,'error','请先申请商户修改');
//        }
    }

    /**
     * 上传图片
     * imgTyp   图片类型    6 - 门头照  7 - 场景照   8 - 收银台照
     * imgNm  图片名称  汉字数字和字母，不允许有特殊字符
     * imgFile   图片（不参与验签）  图片转成十六进制，图片不能超过500KB
     * @param Request $request
     */
    public function image(Request $request)
    {
        // 获取表单上传文件
        $val=$request->post();

        $file = $request->file('imgFile');

//        var_dump($file->getRealPath());die;
        $data['imgFile'] = bin2hex(file_get_contents($file->getRealPath()));//进件参数
            // 移动到框架应用根目录/public/uploads/ 目录下
            $info = $file->validate(['size'=>512000,'ext'=>'jpg,png,jpeg'])->move(ROOT_PATH . 'public' . DS . 'uploads');


            if($info){

                $data['imgTyp']=$val['imgTyp'];//图片类型    6 - 门头照  7 - 场景照   8 - 收银台照
                $data['imgNm']=$val['imgNm'].'.'.$info->getExtension(); //图片名称  汉字数字和字母，不允许有特殊字符
//                    var_dump($data);die;
                $result=$this->upload_pictures($data);//调进件公共参数   传入图片信息
                if($result==1){
                    $arr['imgTyp']=$val['imgTyp'];
                    $arr['imgFile']=$info->getPathname();
                    $cudle=$this->warehousing($val['shop_id'],$arr); //入库


                    if(!$cudle){
                        return_msg(400,'error','图片保存失败');
                    }else{   //保存成功
                        return_msg(200,'success',['file_path'=>$arr['imgFile']]);

                    }
                }else{
                    return_msg(400,'error',$result['msg_dat']);

                }



            }else{
                // 上传失败获取错误信息
               return_msg(400,'error','图片格式错误');
            }




    }

    /**
     * 图片入库
     * @param $id
     * @param $arr
     * @param $val
     * @return bool
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function warehousing($id,$arr)
    {


            //取出之前存入的图片 整合再存入
            $valls=MerchantShop::where('id',$id)->field('imgFile')->find();

                $val=[];
            if($valls->imgFile) {   //是否有值
                $valls=json_decode($valls->imgFile,true);
                $valls[$arr['imgTyp']]=$arr['imgFile'];
                $val=json_encode($valls);


            }else{
                $val[$arr['imgTyp']]=$arr['imgFile'];
                $val=json_encode($val);

            }

        $data=MerchantShop::where('id',$id)->update(['imgFile'=>json_encode($val)]);
        return $data ? true : false;
    }

    /**
     * 上传图片公共参数进件
     * @param Request $request
     * @throws DbException
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function upload_pictures($arr)
    {

        $merchant_id = $this->id;
        $merchant_id=88;

        $data = MerchantIncom::alias('a')
            ->field('a.mercId,a.log_no,b.stoe_id')
            ->join('merchant_shop b', 'b.merchant_id=a.merchant_id')
            ->where('a.merchant_id', $merchant_id)
            ->find();

        $data['imgTyp']=$arr['imgTyp'];
        $data['imgNm']=$arr['imgNm'];
        $data['imgFile']=$arr['imgFile'];
        $data['serviceId'] = '6060606';
        $data['version'] = 'V1.0.1';
        $data['orgNo']="518";
//        $data['merchant_id'] = $merchant_id     ;
        $data = $data->toArray();
       return $this->send($data);
    }

    /**
     * 图片上传消息发送接口
     *
     * @param  int $id
     * @return \think\Response
     */
    public function send($data)
    {
        //获取签名
        $data['signValue'] = sign_ature(0000, $data);
//        var_dump($data);die;
        //发送给新大陆
        $result = json_decode(curl_request($this->url, true, $data, true), true);
//        if ($result['msg_cd'] !== '000000') {
//            return_msg(400, $result["msg_dat"]);
//        }
//        var_dump($result);die;
        //生成签名
        $signValue = sign_ature(1111, $result);
//        return_msg(200, 'success', $result);
//        return json_encode($result);
        if ($result['msg_cd'] == '000000' && $result['signValue'] == $signValue) {
           return 1;
        } else {
            return $result;
        }
    }



    /**
     * 新增门店页面展示及mcc码查询
     * @param Request $request
     * @return string
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function shop_query(Request $request)
    {
        if ($request->post()) {
            $name = $request->param('name');
            $data = Db::name('cloud_mcc')->where('name|comment|explain', 'like', "%$name%")->select();
            return json_encode($data);
        } else if ($request->get()) {
            $merchant_id = \session('merchant_id');
            $merchant_id = 1;
            //stl_oac结算账户 bnk_acnm户名 icrp_id_no结算人身份证号
            // crp_exp_dt_tmp结算人身份证有限期  wc_lbnk_no开户行
            $data = Db::name('merchant_incom')->where('merchant_id', $merchant_id)
                ->field('stl_sign,stl_oac,bnk_acnm,icrp_id_no,crp_exp_dt_tmp,wc_lbnk_no')
                ->find();
            $data = array_merge($data, [1 => '对私', 0 => '对公']);
            if ($data['stl_sign'] == 1) {
                $data = [1 => '对私'];
            }
            return json_encode($data);
        }
    }

    /**
     * 上传图片
     * @param Request $request
     * @return string
     */
    public function image_uplode(Request $request)
    {
        $file = $request->file('image');

        $a = substr($file->getMime(), 0, 5);


        if ($a === 'image') {
            return image_thumbnail($file);
        } else {
            return_msg(400, 'error', '图片类型错误');
        }
    }


    /**
     * 显示当前商户门店
     *
     * @return \think\Response
     * @throws Exception
     */
    public function shop_list(Request $request)
    {
        if ($request->isGet()) {
            $merchant_id = Session::get("username_", "app")["id"];
            $rows = MerchantShop::where("merchant_id= $merchant_id")->count("id");
            $pages = page($rows);
            $res['list'] = MerchantShop::where("merchant_id= $merchant_id")
                ->limit($pages['offset'], $pages['limit'])
                ->field("shop_name,stoe_adds,id")
                ->select();

            $res['pages']['rows'] = $rows;
            $res['pages'] = $pages;
            check_data($res["list"]);
        }
    }


    /**
     *
     * @param [string] keywords  关键字 模糊搜索
     * @param  \think\Request $request
     * @return \think\Response
     * @throws Exception DbException
     */
    public function search_shop(Request $request)
    {
        if ($request->isPost()) {
            $param = $request->param();
            /** 身份为商户 */
            $param['merchant_id'] = Session::get("merchant_id", "merchant");
            /** 身份为员工 */
            $param['user_id'] = Session::get("user_id", "merchant");
            $rows = MerchantShop::where([
                "merchant_id" => ["eq", $param['merchant_id']],
                "shop_name" => ["LIKE", $param["keywords"] . "%"]
            ])->count("id");
            $pages = page($rows);
            $res['list'] = MerchantShop::where([
                "merchant_id" => ["eq", $param['merchant_id']],
                "shop_name" => ["LIKE", $param["keywords"] . "%"]
            ])
                ->limit($pages['offset'], $pages['limit'])
                ->field("shop_name,stoe_adds")
                ->select();

            $res['pages']['rows'] = $rows;
            $res['pages'] = $pages;
            if (count($res['list']) < 1) {
                return_msg(400, "没有数据");
            }
            return (json_encode($res));

        }
    }

    /**
     * 显示门店详情
     * @param [int] $id 门店ID
     * @method GET
     * @param  int $id
     * @return \think\Response
     * @throws Exception
     */
    public function shop_detail(Request $request)
    {
        $param = $request->param();
        if ($request->isGet()) {
            $res = MerchantShop::where("id", $param["id"])->field([
                'id', "shop_name", "stoe_adds", "stoe_cnt_tel", "imgFile"
            ])->find();
            if (count($res->toArray()) > 0) {
                return_msg(200, "success", $res->toArray());
            }
            //mark  没有门店评价表
        }
    }


    /**
     * 获取门店评价 0-好评 1-差评
     * @param Request $request
     * @throws DbException
     */
    public function shop_comment(Request $request)
    {
        if ($request->isGet()) {
            $param['shop_id'] = $request->param('id');

            $comments = MerchantShop::get($param['shop_id']);
            $c_list = collection($comments->comments)->toArray();

            if (count($c_list) > 0) {
                return_msg(200, "success", $c_list);
            } else {
                return_msg(400, "没有数据");
            }
        }
    }

    /**
     * 验证签名域是否正确
     * @param $old_sign
     * @param $res
     * @return bool
     * @return string
     */
    protected function check_sign_value($query_sign, Array $res)
    {
        if ($query_sign !== sign_ature(1111, $res)) {
            return_msg(400, "签名域不正确");

        } elseif ($res['msg_cd'] !== "000000") {
            return_msg(400, "操作失败!");
        } else {
            return true;
        }
    }
    /**
     * 区域码查询
     * @param $data
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function address($data)
    {

        $name = explode(',', $data);

        if (!count($name )< 4) {

            $area = $name[2];//区
            $city = $name[1];//市

            $data = Db::name('area_code')->where(['area_nm'=>['like', "%$area"],'city_nm'=>['like',"%$city"]])->field('merc_area')->find();
            if($data){
                return $data->merc_area;
            }else{
                return false;
            }

        }else{
            return false;
        }
    }

    /**
     * 我的门店
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function pc_myShop()
    {
        $merchant_id=$this->id;
        $data=MerchantShop::where('merchant_id',$merchant_id)->field('shop_name,id,stoe_adds,stoe_cnt_tel')->select();
        if($data){
            return_msg(200,'success',$data);

        }else{
            return_msg(400,'error','此商户没有添加门店');
        }
    }

    /**
     * 我的门店 查询
     * shop_name   门店名称
     * paymentorder  付款顺序   1先上菜后付款   2先付款后上菜
     * @param Request $request
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function pc_myShopQuery(Request $request)
    {
        $merchant_id=$this->id;
        //门店名称
        $shop_name=$request->param('shop_name') ? $request->param('shop_name') : '0';
        $shopsymbol=$shop_name ? 'like' : '<>';
        //付款顺序   1先上菜后付款   2先付款后上菜
        $paymentorder=$request->param('paymentorder') ? $request->param('paymentorder') : 0;
        $paysymbol=$paymentorder ? '=' : '<>';

        $data=MerchantShop::where(['merchant_id'=>$merchant_id,'shop_name'=>[$shopsymbol,$shop_name],'paymentorder'=>[$paysymbol,$paymentorder]])
        ->field('shop_name,id,stoe_adds,stoe_cnt_tel')->select();
//        var_dump($data);die;

        return $data ? return_msg(200,'success',$data) : return_msg(400,'error','没有满足条件的门店');

    }

    /**
     * 门店详情
     * shop_id  门店id
     * @param Request $request
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function pc_particulars(Request $request)
    {
        $shop_id=$request->param('shop_id');
        $data=MerchantShop::where(['id'=>$shop_id])
            ->field('shop_name,id,stoe_adds,stoe_cnt_tel,mailbox,stoe_cnt_nm,imgFile')->find();

        $data['imgFile'] =json_decode($data->imgFile,true);

        return_msg(200,'success',$data);
    }
}
